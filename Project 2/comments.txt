* Search Strategy:
We attempt to create a skeleton which is a set of cells which are not connected, but rather are one cell away from being connected and their connection cannot be prevented. We call this connection a secondary connection. Once a skeleton is made correctly, victory is assured by connecting the skeleton into a tripod/loop while preventing the enemy's attempts at winning.

We generally favour tripods as they are easier to create as well as the individual cells giving strategical value on the board (e.g. preventing opponent tripod) even if the tripod is blocked. Rings also tend to be able to be denied using very few moves whereas tripods are much harder to prevent.

We use Minimax Search with Alpha Beta pruning in order to search for the best move



* Evaluation Function:

We use several heuristics in combination for our evaluation function.

Firstly, we assign the values of +1000 and -1000 to a winning state and a 
losing state respectively. For a draw, we assign the value of 0.

If the board is not in a winning state, we return a value that is evaluated
from our heuristics.

* Heuristics:

- Position of move:
When a piece is placed next to a piece of the same colour we assign a value
of 2 for this





Higher value to positions near stones of your own colour
	Highest bonus for direct neighbour
	Second highest for a stone that forms a secondary connection (can connect to it no matter what)
	Third highest for stone that is 2 stones away from another one of your stones

Maintain secondary connections:
	When you have a secondary connection and opponent plays in one of the two empty cells to attempt to block your connection, give a bonus to the cell that connects your secondary connection.
	Look at neighbours of last placed stone and look for pattern of your piece, empty location and your piece. If you find this pattern, put a piece in that cell

Connecting to edges
	Give bonus if you connect to an edge or if you extend a group that is connected to an edge.

Joining big group
	Give bonus to join two groups
	Give bonus to joining a group that is a large size

Check for winning states
	Whenever a piece is placed, 'place' a piece in each cell next to it and check if there is a win

REFERENCE: 

http://webdocs.cs.ualberta.ca/~hayward/theses/ewalds.pdf


* Creative Techniques:

Some cells are useless to be taken unless they stop the enemy from winning. This is because they do not add to a tripod/loop in any meaningful way. For example, taking the center of your own loop as you are forming one. These cells are treated with low value so that our player does not take them. If an opposing player can use it to create a winning condition, the value will be adjusted accordingly so the player considers taking them.

Initially our player could not calculate moves fast enough. We had to make some optimisations in order to speed up our player. As minimax checks for terminal states, this required us to call getWinner() repeatedly to check 
for a draw/losing/winning state. The repeated calls for this in the minimax recursive tree resulted in a massive slow down of a player. 

To counteract this, we assume that for the before the first X moves (x=9 for board size 3 and x=11 otherwise) there cannot possibly be a win, so we do not check for a winner in these states. Secondly, if a move is made in minimax that does not connect to a piece of the same colour, getWinner() is not called as it can't be a winning move.






From Internet:

http://www.hamedahmadi.com/gametree/

MoveAnalysis function to order moves based on how good they are (to make pruning better)

Another method sometimes used to increase speed is to divide the number returned by the analysis function by a constant value. (For example divide it by 10.) This reduces the range of values that the nodes in the game tree can have, and can therefore result in more pruning. However, this makes the analysis less accurate, so it should be used with care.